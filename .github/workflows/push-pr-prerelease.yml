# Create the v0.0.0-pr<number>-latest pre-release on PR update.
# Cleans up old tags and releases.

name: CI-PR

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - closed

jobs:
  pants-build:
    name: Build with Pants and probe which packages has changed
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ env.CHANGED }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all commits so we can calculate diff properly
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Determine which packages has changed using Pants
        run: |
          git fetch -a -t --force
          echo "CHANGED=$(pants list --changed-since=stable | cut -d'/' -f 1-2 | grep -v : | tr '\n' ',')" >> $GITHUB_ENV
      - name: Check BUILD files
        if: false # TODO enable linting with a later task
        run:  |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false # TODO enable linting with a later task
        run: | 
          pants lint check ::
      - name: Package all
        run: |
          pants package ::
      - name: Save pants build results to cache
        uses: actions/cache/save@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          enableCrossOsArchive: true

  call-framework-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: framework-core
            os: ubuntu-latest
    steps:
      - name: Check out repository
        if: contains( ${{ needs.pants-build.outputs.changed }} , ${{ matrix.package }})
        uses: actions/checkout@v3
      - name: Create release
        if: contains( ${{ needs.pants-build.outputs.changed }} , ${{ matrix.package }})
        uses: ./.github/workflows/framework-release.yml
        with:
          os: ${{ matrix.os }}
          package: ${{ matrix.package }}
          tag: ${{ matrix.package }}/v0.0.0-pr${{ github.event.number }}
          prerelease: true

