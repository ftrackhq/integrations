# Create public release on tag push.

name: CI-TAG

on:
  create:
    tags:
      - '(.*\/.*)' # Only trigger on tags having a slash within, ignore other tags

jobs:
  pants-build:
    name: Build with Pants and probe which packages has changed
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ env.CHANGED }}
      framework_core_tag: ${{ env.FRAMEWORK_CORE_TAG }}
      framework_core_version: ${{ env.FRAMEWORK_CORE_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all commits so we can calculate diff properly
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Determine which packages has changed using Pants
        run: |
          git fetch -a -t --force
          echo "CHANGED=$(pants list --changed-since=stabletest | cut -d'/' -f 1-2 | grep -v : | tr '\n' ',')" >> $GITHUB_ENV
      - name: Get framework core tag and store version
        if: contains(['framework-core'],${{ env.CHANGED }})
        run:  | 
          echo "FRAMEWORK_CORE_TAG=$(git tag | grep 'framework-core' | sort | tail -n 1)" >> $GITHUB_ENV
          echo "FRAMEWORK_CORE_VERSION=$(git tag | grep 'framework-core' | sort | tail -n 1 | cut -d/ -f 2-)" >> $GITHUB_ENV
          cd libs/framework-core/source/framework_core
          echo "__version__ = '${{ env.FRAMEWORK_CORE_VERSION }}'" > _version.py
      # TODO: do same thing for other packages
      - name: Check BUILD files
        if: false # TODO enable linting with a later task
        run:  |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false # TODO enable linting with a later task
        run: | 
          pants lint check ::
      - name: Package all
        run: |
          pants package ::
      - name: Save pants build results to cache
        uses: actions/cache/save@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          enableCrossOsArchive: true

# TODO: Retag stable from this point on

  connect-plugin-build:
    strategy:
      matrix:
        include:
          - package: framework-core
            os: ubuntu-latest
            tag: ${{ needs.pants-build.outputs.framework_core_tag }}
            version: ${{ needs.pants-build.outputs.framework_core_version }}
          #- package: framework-qt
          #  os: ubuntu-latest
          #- package: framework-maya
          #  os: ubuntu-latest
          #- package: framework-nuke
          #  os: ubuntu-latest
          #- package: framework-houdini
          #  os: ubuntu-latest
          #- package: framework-3dsmax
          #  os: ubuntu-latest
          #- package: framework-unreal
          #  os: windows-latest
    name: ${{ matrix.package }}
    needs: pants-build
    env:
        PACKAGE: ${{ matrix.package }}
        TAG: ${{ matrix.tag }}
        CHANGED: ${{ needs.pants-build.outputs.changed }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        #if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        with:
          python-version: '3.7'
      - name: Fetch tags
        if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        run: git fetch -a -t
      - name: Create release
        id: create_release
        if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          body: |
            Auto-generated pre-release on push to main
            
            User: **${{ github.actor }}**
            Ref: **${{ github.ref }}**
            Commit: **${{ github.sha }}**
            
            Please check release notes for more information.
          draft: true
          prerelease: false
      - name: Restore pants build from cache
        if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        uses: actions/cache/restore@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      - name: Build Connect plugin on Linux
        if: ${{ contains(env.CHANGED, env.PACKAGE) && contains(matrix.os,'ubuntu') }}
        run: |
          cd dist
          tar -xzvf ${{ env.PACKAGE }}*.tar.gz
          cd $(ls -d ${{ env.PACKAGE }}*/|head -n 1)
          python setup.py build_plugin
          mv build/*.zip ../
      - name: Build Connect plugin on Windows
        if: ${{ contains(env.CHANGED, env.PACKAGE) && contains(matrix.os,'windows') }}
        run: |
          cd dist
          tar -xzvf $(gci ${{ env.PACKAGE }}*.tar.gz -Name)
          cd $(gci ${{ env.PACKAGE }}* -Directory -Name)
          python setup.py build_plugin
          mv build/*.zip ../
      - uses: xresloader/upload-to-github-release@main
        if: ${{ contains(env.CHANGED, env.PACKAGE) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "dist/${{ env.PACKAGE }}-*.zip"
          release_id: ${{ steps.create_release.outputs.id }}
          overwrite: true
          verbose: true
          draft: false
