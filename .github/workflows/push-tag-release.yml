# Create public release on tag push, preserves previous releases.
# Re-tags "stable" to point on HEAD

name: CI-TAG

# Prevent concurrent runs of this workflow due to the pants cache being shared between them.
concurrency: pants_ci

on:
  create:
    tags:
      - '(.*\/v.*)' # Only trigger on tags having a slash within, ignore other tags

jobs:
  pants-build:
    name: Build with Pants and probe which packages has changed
    runs-on: ubuntu-latest
    outputs:
      package: ${{ env.PACKAGE }}
      version: ${{ env.VERSION }}
      tag: ${{ env.TAG }}
      os: ${{ env.OS }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all commits so we can calculate diff properly
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.

      - name: Find out which package have been tagged
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "PACKAGE=$(echo ${{ github.ref }} | cut -d/ -f 3-3)" >> $GITHUB_ENV
          echo "VERSION=$(echo ${{ github.ref }} | cut -d/ -f 4-4)" >> $GITHUB_ENV
          echo "TAG=$(echo ${{ github.ref }} | cut -d/ -f 3-4)" >> $GITHUB_ENV

      # Connect plugin manager version mgmt

      - name: Set base envs
        run:  | 
          echo "FOLDER=projects" >> $GITHUB_ENV
          echo "OS=ubuntu-latest" >> $GITHUB_ENV

      - name: Override folder
        if: ${{ env.PACKAGE == 'framework-core' || env.PACKAGE == 'framework-qt' }}
        run:  | 
          echo "FOLDER=libs" >> $GITHUB_ENV

      - name: Override os
        if: ${{ env.PACKAGE == 'framework-unreal' }}
        run:  | 
          echo "OS=windows-latest" >> $GITHUB_ENV

      - name: Write version to source
        run:  |
          echo "SOURCE_PATH=${{ env.FOLDER }}/${{ env.PACKAGE }}/source/ftrack_$(echo ${{ env.PACKAGE }} | tr - _)" >> $GITHUB_ENV
          cd ${{ env.SOURCE__PATH }}
          echo "__version__ = '${{ env.VERSION }}'" > _version.py

      - name: Check BUILD files
        if: false # TODO enable linting with a later task
        run:  |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false # TODO enable linting with a later task
        run: | 
          pants lint check ::
      - name: Package
        run: |
          pants package --python-infer-unowned-dependency-behavior=ignore ${{ env.FOLDER }}/${{ env.PACKAGE }}:
      - name: Save pants build results to cache
        uses: actions/cache/save@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          enableCrossOsArchive: true

# TODO: Re-tag stable from this point on

  release:
    needs: pants-build
    runs-on: ${{ needs.pants-build.outputs.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Run release action
        uses: ./.github/actions/connect-release
        with:
          package: ${{ needs.pants-build.outputs.package }}
          tag: ${{ needs.pants-build.outputs.tag }}
          deleteprevious: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Align latest tag to the latest release tag
  align-latest:
    needs: release
    runs-on: ${{ needs.pants-build.outputs.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Run release action
        uses: ./.github/actions/connect-release
        with:
          package: ${{ needs.pants-build.outputs.package }}
          tag: ${{ needs.pants-build.outputs.package }}/v0.0.0-latest
          deleteprevious: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}