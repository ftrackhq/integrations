name: CI

on:
  push:
    branches: ["main", "*/story", "backlog/gh-ci-with-setuptools2"]

# TODO: Find out which packages has changed since target branch, for now we
# just build all packages.
# TODO: Support platform specific builds when Harmony is ready.

jobs:
  framework-core:
    name: Pre-release and build framework core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Identify source tag and hash
        run: |
          echo "Fetch:"
          git fetch -a
          echo "Status:"
          git status
          echo "Existing tags:"
          git tag | sort
          echo "TAG=$(git tag | grep 'framework-core' | sort | tail -n 1)" >> $GITHUB_ENV
          echo "VERSION=$(git tag | grep 'framework-core' | sort | tail -n 1 | cut -d/ -f 2-)" >> $GITHUB_ENV
          echo "HASH=$(echo ${{github.sha}} | cut -b -7)" >> $GITHUB_ENV
      - name: Create pre release
        id: create_pre_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: Auto-generated pre-release on merge to main with tag ${{ env.TAG }}
          body: |
            Commit: ${{ env.HASH }}
            Ref: ${{ github.ref }}
            Please check PR for details/release notes.
          draft: false
          prerelease: true
      - name: Write version to _version.py
        run: |
          cd libs/framework-core/source/framework_core
          echo "__version__ = '${{ env.VERSION }}'" > _version.txt
      - name: Write version to setup.py
        run: |
          cd libs/framework-core/
           sed -i "s/v0.0.0/${{ env.VERSION }}/g" setup.py
      - name: Check BUILD files
        run:  |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false
        run: | 
          pants lint check ::
      - name: Package / Run
        run: |
          # We also smoke test that our release process will work by running `package`.
          pants package libs/framework-core::
      - name: Build framework core Connect plugin
        run: |
          cd dist
          tar -xzvf framework-core*.tar.gz
          cd $(ls -d framework-core*/|head -n 1)
          python setup.py build_plugin
          mv build/*.zip ../
      - uses: xresloader/upload-to-github-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "dist/*.zip"
          release_id: ${{ steps.create_pre_release.outputs.release_id }}
          overwrite: true
          verbose: true