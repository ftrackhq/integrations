# Create the v0.0.0-latest pre-release on push to main, be it on a PR merge,
# direct push or a release tag push.
# Cleans up old tags and releases.

name: CI

on:
  push:
    branches: ["main", "backlog/gh-ci-with-setuptools2"]

jobs:
  pants-build:
    name: Build with Pants and probe which packages has changed
    runs-on: ubuntu-latest
    env:
      # Constants
      VERSION: "v0.0.0"
    outputs:
      changed: ${{ env.CHANGED }}
      version: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Determine which packages has changed
        run: |
          echo "CHANGED=$(pants list --changed-since=origin/main | cut -d'/' -f 1-2 | grep -v :)" >> $GITHUB_ENV
      # Store dummy version number, will be picked up by setup.py
      - name: Update framework core version
        if: contains(['framework-core'],${{ env.CHANGED }})
        run:  | 
          cd libs/framework-core/source/framework_core
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Update framework qt version
        if: contains(['framework-qt'],${{ env.CHANGED }})
        run:  | 
          cd libs/framework-qt/source/framework_qt
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Update framework maya version
        if: contains(['framework-maya'],${{ env.CHANGED }})
        run:  | 
          cd projects/framework-maya/source/framework_maya
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Update framework houdini version
        if: contains(['framework-houdini'],${{ env.CHANGED }})
        run:  | 
          cd projects/framework-houdini/source/framework_houdini
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Update framework 3ds max version
        if: contains(['framework-3dsmax'],${{ env.CHANGED }})
        run:  | 
          cd projects/framework-3dsmax/source/framework_3dsmax
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Update framework Unreal version
        if: contains(['framework-unreal'],${{ env.CHANGED }})
        run:  | 
          cd projects/framework-unreal/source/framework_unreal
           echo "__version__ = '${{ env.VERSION }}'" > _version.py
      - name: Check BUILD files
        if: false # TODO enable linting with a later task
        run:  |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false # TODO enable linting with a later task
        run: | 
          pants lint check ::
      - name: Package all
        run: |
          pants package ::
      - name: Save pants build results to cache
        uses: actions/cache/save@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}

  connect-build:
    strategy:
      matrix:
        package: [framework-core,framework-qt,framework-maya,framework-houdini,framework-3dsmax,framework-unreal]
    name: Build & release ${{ matrix.package }}
    needs: pants-build
    env:
        VERSION: "${{ needs.pants-build.outputs.version }}"
        PACKAGE: ${{ matrix.package }}
    runs-on: ubuntu-latest
    steps:
      - name: Skip if package has not changed
        if: not contains(['${{ env.PACKAGE }}'],${{ needs.pants-build.outputs.changed }})
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - name: Delete previous latest release and tag
        uses: dev-drprasad/delete-tag-and-release@v1.0 # PRERELEASE is v1.0 and can also be used to test and give us feedback
        with:
          tag_name: $${{ env.PACKAGE }}/${{ env.VERSION }}-latest #(required) tag name to delete
          github_token: ${{ secrets.GITHUB_TOKEN }} # (required) a GitHub token with write access to the repo that needs to be modified
          delete_release: true #(optional) default: true
      - name: Create pre-release
        id: create_pre_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.PACKAGE }}/${{ env.VERSION }}-latest
          release_name: ${{ env.PACKAGE }}/${{ env.VERSION }}-latest
          body: |
            Auto-generated pre-release on push to main
            
            User: **${{ github.actor }}**
            Ref: **${{ github.ref }}**
            Commit: **${{ github.sha }}**
            
            Please check release notes for more information.
          draft: true
          prerelease: true
      - name: Restore pants build from cache
        uses: actions/cache/restore@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          fail-on-cache-miss: true
      - name: Build Connect plugin
        run: |
          cd dist
          tar -xzvf ${{ env.PACKAGE }}*.tar.gz
          cd $(ls -d ${{ env.PACKAGE }}*/|head -n 1)
          python setup.py build_plugin
          mv build/*.zip ../
      - uses: xresloader/upload-to-github-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "dist/${{ env.PACKAGE }}-*.zip"
          release_id: ${{ steps.create_pre_release.outputs.id }}
          overwrite: true
          verbose: true
          draft: false
