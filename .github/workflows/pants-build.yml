name: Pants-build
on:
  workflow_call:
    inputs:
      full_release:
        required: true
        type: boolean
      check_changed:
        required: true
        type: boolean
      tag_type:
        required: false
        type: string
    outputs:
      changed:
        description: "Changed packages"
        value: ${{ jobs.pants-build.outputs.changed }}
      package:
        description: "Package name"
        value: ${{ jobs.pants-build.outputs.package }}
      version:
        description: "Package version"
        value: ${{ jobs.pants-build.outputs.version }}
      tag:
        description: "Package tag"
        value: ${{ jobs.pants-build.outputs.tag }}
      os:
        description: "Package os"
        value: ${{ jobs.pants-build.outputs.os }}
      suffix:
        description: "Package suffix"
        value: ${{ jobs.pants-build.outputs.suffix }}

jobs:
  # Build root docs
  pants-build:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ env.CHANGED }}
      package: ${{ env.PACKAGE }}
      version: ${{ env.VERSION }}
      tag: ${{ env.TAG }}
      os: ${{ env.OS }}
      suffix: ${{ env.SUFFIX }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all commits so we can calculate diff properly
      - uses: pantsbuild/actions/init-pants@v4-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - uses: ./.github/workflow/update-packages-version
        if: ${{ inputs.full_release }}
        with:
          changed: $(echo ${{ github.ref }} | cut -d/ -f 3-3)"
          version: $(echo ${{ github.ref }} | cut -d/ -f 4-4)"
      - name: Set output environment variables
        if: ${{ inputs.full_release }}
        shell: bash
        run: |
          echo "PACKAGE=$(echo ${{ github.ref }} | cut -d/ -f 3-3)" >> $GITHUB_ENV
          echo "VERSION=$(echo ${{ github.ref }} | cut -d/ -f 4-4)" >> $GITHUB_ENV
          echo "TAG=$(echo ${{ github.ref }} | cut -d/ -f 3-4)" >> $GITHUB_ENV

      - name: Determine which packages has changed using Pants
        if: ${{ inputs.check_changed }}
        shell: bash
        run: |
          git fetch --all --force
          echo "CHANGED=$(pants list --changed-since=origin/main | cut -d'/' -f 1-2 | grep -v : | uniq | tr '\n' ',')" >> $GITHUB_ENV
      - uses: ./.github/workflow/update-packages-version
        if: ${{ inputs.check_changed }}
        with:
          changed: ${{ env.CHANGED }}
          version: "0.0.0-${{inputs.tag_type}}"
      - name: Check BUILD files
        if: false # TODO enable linting with a later task
        shell: bash
        run: |
          pants tailor --check update-build-files --check ::
      - name: Lint and typecheck
        if: false # TODO enable linting with a later task
        shell: bash
        run: |
          pants lint check ::
      - name: Package all
        shell: bash
        run: |
          pants package ::
      - name: Save pants build results to cache
        uses: actions/cache/save@v3
        with:
          path: dist
          key: pants-dist-${{github.sha}}
          enableCrossOsArchive: true