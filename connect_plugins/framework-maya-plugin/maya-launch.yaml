type: launch_config

# TODO: in the connect config, we should have a connect data location and is where all the dependnecies are located
name: framework-maya
department: modeling # This allows user to decide to which department this launch should be discoverable
version: 1.0.0
source:
  type: git-release
  # TODO: If user specify url we pick it from ther but if user sets name and version then we look in our repo and check for releases matching
  url: "https://github.com/ftrackhq/integrations/releases/download/maya-dependnecies-test%2Fv0.0.0/dependencies.zip"
  # TODO: dependnecies key is automatically set when downloading and installing the source

# TODO: local and pip should also be supported
#source:
  #type: local
  # TODO: seems that maya can't read the .pth file for redirection, so we have to sepcify the main repo location and the dependnecies separatelly
  # Or maybe we just point to the framework-maya and is connect who executes the poetry install and points the dependnecies to the dep folder and the other to the source folder.
  # If dependnencies key is passed then all setup manually by the user.
  #path: "/Users/ftrack/work/ftrack/repos/integrations/projects/framework-maya"
  #interpreter: ""
  # Basically seems that pointing to the venv works for the dependencies but not for the integration itself,
  #dependnecies: "/Users/ftrack/work/ftrack/repos/integrations/projects/framework-maya/.venv/lib/python3.7/site-packages"
#source:
#  type: pip
#  package: "ftrack-framework-maya==1.2.3"
#  interpreter: "/Applications/Autodesk/maya2022/Maya.app/Contents/bin/mayapy"

extensions:
  # TODO we support extensions published on git (but pointing to local folder for the prototype)
  # TODO: think about how to install specific extensions requirements.
  # - git release ftrack-framework-maya-extension-24.5.0
  # - from pip ftrack-framework-maya-extension == 24.5.0
  # TODO: we do the same as in source we donwload the extensions, put it in the plugin_data folder and link the dependnecies folder to the pythonpath and the source extension folde replaces this one.
  #- type: git-release
    #url: "https://github.com/ftrackhq/integrations/releases/download/maya-dependnecies-test%2Fv0.0.0/dependencies.zip"
  #- type: local
    #path: "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-common-extensions"
  #- type: local
    #path: "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-maya-extensions"
  - "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-common-extensions"
  - "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-maya-extensions"

# TODO: extensions are same as the soource, so when we install an extension from a github release it will install in the plugin_data folder and put the provided dependnecies folder into the pythonpath if there is a dependnecies folder. If user has its own extensions, then is up to the user to put the dependncies on the pythonpath.

# TODO: think about if we prefere to specify where the hooks and the bootstrap scripts are in here or they should simply
#  always be in the extensions and registered as scripts. Pointing them in here for the prototype
launch_hook_path: "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-maya-extensions/hooks"
# launch_hook_path: "${extensions}/hooks"
bootstrap_path: "/Users/ftrack/work/ftrack/repos/integrations/extensions/framework-maya-extensions/bootstrap"

# TODO: Think on if to provide something like this.
# python_standalone_interpreter: "/Applications/Autodesk/maya2022/Maya.app/Contents/bin/mayapy"

# TODO: we could setup all the paths in here if we don't want to use the hook by default and leave that clean for the user to hook whatever he feels is needed.
environment_variables:
  PYTHONPATH.prepend:
    #- source result
    - '${source.dependencies}'
    - '${bootstrap_path}'
  MAYA_SCRIPT_PATH:
    - '${bootstrap_path}'
  FTRACK_MAYA_VERSION:
    - '${version}'

# TODO: mayabe we could use a template engine like Jinja2 to resolve the
#  placeholders in a standard way: https://jinja.palletsprojects.com/en/3.1.x/
#  name: "default-connect-config"
#  place_holder_for_env: "{{ os.getenv('FTRACK_CONNECT_PLUGIN_PATH') }}"
#  place_holder_for_local_var: "{{ name }}"


# TODO: the follwoing code I think should be in a separated file, but is something that we have to think about. Also can be very simplified.

priority: 100 # Remove this one, just have it as an optional thing, and provide 100 as default. I think it is overcomplicating.
context:
  - Task # Does this actually work in any other situation right now?
identifier: ftrack-framework-launch-maya # is this really needed? Can't we use the name as identifier?
applicationIdentifier: maya_{variant}
integrations: # I think this can be removed.
  framework:
    - framework-maya
label: Maya
icon: maya
variant: "{version}"
search_path:
  windows:
    prefix:
      - C:\
      - Program Files.*
    expression:
      - Autodesk
      - Maya.+
      - bin
      - maya.exe
  darwin:
    prefix:
      - "/"
      - Applications
    expression:
      - Autodesk
      - maya.+
      - Maya.app
  linux:
    prefix:
      - "/"
      - usr
      - autodesk
      - maya.+
    expression:
      - bin
      - maya$
    version_expression: "maya(?P<version>\\d{4})"
extensions_path:
  - "${extensions}"
  #- extensions/common
  #- extensions/maya